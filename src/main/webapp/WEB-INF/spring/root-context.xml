<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
	<context:component-scan base-package="com.kh.festait.config" /> 
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<context:property-placeholder location="classpath:driver.properties"/>
	
	<!-- 1단계 DB연결 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${datasource.driver}" />
		<property name="url" value="${datasource.url}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
	</bean>
	
	<!-- 2단계) MyBatis Spring을 활용하여 SqlSessionFactory생성 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<!-- mybatis설정파일 위치 지정 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:mapper/**/*.xml"></property>
    
	</bean>
	
	<!-- 3단계) SqlSessionTemplate을 제공하는 bean등록 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!--  
		transactionManager
		- 데이터베이스 트랜잭션 처리를 담당하는 bean객체
		- jdbc를 통해 컨넥션을 얻어 온 후, 트랜잭션을 시작/커밋/롤백 처리를 담당
		- @Transactional 어노테이션을 통해 트랜잭션을 선언적으로 처리
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 
		multipartResolver
		- Http요청중 파일업로드 형태의 데이터가 전달되는 경우, 이를 처리해주는 bean객체
		request객체를 상속받은 MultipartHttpServletRequest로 자동 변경해준다.
		
		maxUploadSize : 업로드 되는 전체 파일의 크기 제한 설정(바이트)
		maxInMemorySize : 업로드 처리시 디스크에 파일을 생성하기 전, 메모리에 보관할 파일의 최대 크기. 업로드한 파일의 크기가 inMemory
		사이즈보다 큰 경우, 파일을 디스크에 임시 보관한다.
	 -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<property name="defaultEncoding" value="UTF-8"></property>
	 	<property name="maxUploadSize" value="10000000"></property>
	 	<property name="maxInMemorySize" value="2000000"></property>
	 </bean>
	 
	 
	 
</beans>
